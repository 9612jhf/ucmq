# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = $(HOME)/download/gtest-1.6.0

# Where to find user code.
USER_DIR = .

# Flags passed to the preprocessor.
CPPFLAGS += -I$(GTEST_DIR)/include -I$(USER_DIR)/.. -L$(HOME)/local/libevent/lib

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = test_maxqueue \
        test_delay \
        test_readonly \
        test_single_file \
        test_multi_file \
        test_multi_queue \
        test_concurrent \
        test_url_exception \
        test_unit

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

UCMQ_DIR = $(USER_DIR)/..
UCMQ_OBJS = $(UCMQ_DIR)/ucmq-crc16.o \
            $(UCMQ_DIR)/ucmq-file.o \
            $(UCMQ_DIR)/ucmq-ini.o \
            $(UCMQ_DIR)/ucmq-log.o \
            $(UCMQ_DIR)/ucmq-mq_config.o \
            $(UCMQ_DIR)/ucmq-mq_errno.o \
            $(UCMQ_DIR)/ucmq-mq_evhttp.o \
            $(UCMQ_DIR)/ucmq-mq_queue_manage.o \
            $(UCMQ_DIR)/ucmq-mq_store_file.o \
            $(UCMQ_DIR)/ucmq-mq_store_manage.o \
            $(UCMQ_DIR)/ucmq-mq_store_msg.o \
            $(UCMQ_DIR)/ucmq-mq_store_rtag.o \
            $(UCMQ_DIR)/ucmq-mq_util.o \
            $(UCMQ_DIR)/ucmq-trace.o \
            $(UCMQ_DIR)/ucmq-util.o

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

#mq_client.o : $(USER_DIR)/../mq_client.c $(USER_DIR)/../mq_client.h $(USER_DIR)/../object.h $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/../mq_client.c

ucmq_common.o : $(USER_DIR)/ucmq_common.c
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ucmq_common.c

test_maxqueue.o : $(USER_DIR)/test_maxqueue.cc $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/test_maxqueue.cc

test_maxqueue : ucmq_common.o test_maxqueue.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread -lrt -lcurl $^ -o $@

test_delay.o : $(USER_DIR)/test_delay.cc $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/test_delay.cc

test_delay : ucmq_common.o test_delay.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread -lrt -lcurl $^ -o $@

test_readonly.o : $(USER_DIR)/test_readonly.cc $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/test_readonly.cc

test_readonly : ucmq_common.o test_readonly.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread -lrt -lcurl $^ -o $@

test_single_file.o : $(USER_DIR)/test_single_file.cc $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/test_single_file.cc

test_single_file : ucmq_common.o test_single_file.o $(UCMQ_OBJS) gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread -lrt -lcurl -levent $^ -o $@

test_multi_file.o : $(USER_DIR)/test_multi_file.cc $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/test_multi_file.cc

test_multi_file : ucmq_common.o test_multi_file.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread -lrt -lcurl $^ -o $@

test_multi_queue.o : $(USER_DIR)/test_multi_queue.cc $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/test_multi_queue.cc

test_multi_queue : ucmq_common.o test_multi_queue.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread -lrt -lcurl $^ -o $@

test_concurrent.o : $(USER_DIR)/test_concurrent.cc $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/test_concurrent.cc

test_concurrent : ucmq_common.o test_concurrent.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread -lrt -lcurl $^ -o $@

test_url_exception.o : $(USER_DIR)/test_url_exception.cc $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/test_url_exception.cc

test_url_exception : ucmq_common.o test_url_exception.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread -lrt -lcurl $^ -o $@

test_unit.o : $(USER_DIR)/test_unit.cc $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/test_unit.cc

test_unit : test_unit.o $(UCMQ_OBJS) gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread -lrt -levent $^ -o $@
